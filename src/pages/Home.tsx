import { Link } from "react-router-dom";
import { useMemo, useState } from "react";
import { Button, Card, Chip, CircularProgress, TaskCard } from "../ui";


export default function Home() {
  const [activeTime, setActiveTime] = useState<'morning' | 'evening'>('morning');
  const [completedSteps, setCompletedSteps] = useState<Record<string, boolean>>(() => {
    try {
      const saved = localStorage.getItem('skiniq.routine_progress');
      return saved ? JSON.parse(saved) : {};
    } catch {
      return {};
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
  const toggleStepCompleted = (stepId: string) => {
    const newCompletedSteps = {
      ...completedSteps,
      [stepId]: !completedSteps[stepId]
    };
    setCompletedSteps(newCompletedSteps);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
      localStorage.setItem('skiniq.routine_progress', JSON.stringify(newCompletedSteps));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
    }
  };

  
  const userName = useMemo(() => {
    try {
      const data = localStorage.getItem("skiniq.answers");
      const parsed = data ? JSON.parse(data) : {};
      return parsed?.name || undefined;
    } catch {
      return undefined;
    }
  }, []);


  const hasCompletedQuiz = useMemo(() => {
    try {
      const data = localStorage.getItem("skiniq.answers");
      if (!data) return false;
      const parsed = JSON.parse(data);
      return (typeof parsed?.name === "string" ? parsed.name.trim() : "").length > 0;
    } catch {
      return false;
    }
  }, []);

  const plan = useMemo(() => {
    try {
      const data = localStorage.getItem("skiniq.plan");
      return data ? JSON.parse(data) : null;
    } catch {
      return null;
    }
  }, []);

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á —É—Ö–æ–¥–∞
  const skincareTasks = useMemo(() => {
    const morningTasks = [
      { id: 'morning-cleanser', icon: 'üß¥', title: '–û—á–∏—â–µ–Ω–∏–µ', subtitle: '–ù–∞ –≤–ª–∞–∂–Ω—É—é –∫–æ–∂—É' },
      { id: 'morning-serum', icon: 'üíß', title: '–°—ã–≤–æ—Ä–æ—Ç–∫–∞', subtitle: '–ü–æ—Å–ª–µ –æ—á–∏—â–µ–Ω–∏—è' },
      { id: 'morning-moisturizer', icon: 'üß¥', title: '–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ', subtitle: '–ü–µ—Ä–µ–¥ SPF' },
      { id: 'morning-spf', icon: '‚òÄÔ∏è', title: '–ó–∞—â–∏—Ç–∞ SPF', subtitle: '–ó–∞ 15 –º–∏–Ω –¥–æ –≤—ã—Ö–æ–¥–∞' }
    ];
    
    const eveningTasks = [
      { id: 'evening-cleanser', icon: 'üß¥', title: '–î–≤–æ–π–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ', subtitle: '–ú–∞—Å–ª–æ + –≥–µ–ª—å' },
      { id: 'evening-treatment', icon: '‚ú®', title: '–ê–∫—Ç–∏–≤—ã', subtitle: '–ù–∞ —Å—É—Ö—É—é –∫–æ–∂—É' },
      { id: 'evening-moisturizer', icon: 'üß¥', title: '–ü–∏—Ç–∞–Ω–∏–µ', subtitle: '–ó–∞–≤–µ—Ä—à–∞—é—â–∏–π —ç—Ç–∞–ø' }
    ];
    
    return activeTime === 'morning' ? morningTasks : eveningTasks;
  }, [activeTime]);

  // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progress = useMemo(() => {
    const totalTasks = skincareTasks.length;
    const completedTasks = skincareTasks.filter(task => completedSteps[task.id]).length;
    return totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
  }, [skincareTasks, completedSteps]);

  return (
    <div className="min-h-screen">
      {/* üîù Hero Section */}
      <div className="container-premium pt-8 pb-6">
        {/* –õ–æ–≥–æ—Ç–∏–ø */}
        <div className="text-center mb-6">
          <h1 className="font-serif text-4xl text-text-primary mb-2">
            SkinIQ
          </h1>
        </div>
        
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ */}
        {userName && (
          <div className="text-center mb-4">
            <h2 className="font-serif text-2xl text-text-primary mb-2">
              –ü—Ä–∏–≤–µ—Ç, {userName}!
            </h2>
            <p className="text-text-secondary font-sans">
              –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π
            </p>
          </div>
        )}
      </div>

      {/* üìã –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ö–æ–¥ */}
      {hasCompletedQuiz && plan ? (
        <div className="container-premium space-y-element">
          <Card>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
            <div className="flex items-center justify-between mb-element">
              <div className="flex items-center gap-4">
                <div>
                  <h3 className="font-serif text-xl text-text-primary">
                    –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ö–æ–¥
                  </h3>
                </div>
                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
                <CircularProgress 
                  progress={progress} 
                  size={60} 
                  strokeWidth={4}
                />
              </div>
              
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –£—Ç—Ä–æ/–í–µ—á–µ—Ä */}
              <div className="flex gap-2">
                <Chip
                  active={activeTime === 'morning'}
                  onClick={() => setActiveTime('morning')}
                  size="md"
                >
                  –£—Ç—Ä–æ
                </Chip>
                <Chip
                  active={activeTime === 'evening'}
                  onClick={() => setActiveTime('evening')}
                  size="md"
                >
                  –í–µ—á–µ—Ä
                </Chip>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
            <div className="space-y-3">
              {skincareTasks.map((task) => (
                <TaskCard
                  key={task.id}
                  icon={task.icon}
                  title={task.title}
                  subtitle={task.subtitle}
                  completed={completedSteps[task.id] || false}
                  onClick={() => toggleStepCompleted(task.id)}
                />
              ))}
            </div>
          </Card>

          {/* üîò CTA –ö–Ω–æ–ø–∫–∞ */}
          <div className="text-center">
            <Link to="/plan">
              <Button size="lg" fullWidth className="text-lg py-4">
                –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω
              </Button>
            </Link>
          </div>
        </div>
      ) : (
        /* –≠–∫—Ä–∞–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */
        <div className="container-premium">
          <Card className="text-center">
            <div className="py-8">
              <div className="text-6xl mb-4">‚ú®</div>
              <h2 className="font-serif text-2xl text-text-primary mb-text">
                –°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞
              </h2>
              <p className="text-text-secondary mb-element leading-relaxed max-w-sm mx-auto">
                –ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
              </p>
              <Link to="/quiz">
                <Button size="lg" fullWidth>
                  –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É
                </Button>
              </Link>
            </div>
          </Card>
        </div>
      )}

      {/* üõç –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="container-premium mt-section pb-8">
        <div className="grid grid-cols-2 gap-4">
          {/* –ö–æ—Ä–∑–∏–Ω–∞ */}
          <Link to="/cart">
            <Card clickable className="text-center py-6 bg-gradient-to-br from-pearl-card to-button-from">
              <div className="text-3xl mb-2">üõçÔ∏è</div>
              <h4 className="font-sans font-medium text-text-primary">
                –ö–æ—Ä–∑–∏–Ω–∞
              </h4>
              <p className="text-sm text-text-secondary mt-1">
                –¢–æ–≤–∞—Ä—ã –∏–∑ –ø–ª–∞–Ω–∞
              </p>
            </Card>
          </Link>
          
          {/* –ê–Ω–∫–µ—Ç–∞ */}
          <Link to="/quiz">
            <Card clickable className="text-center py-6 bg-gradient-to-br from-pearl-card to-accent/10">
              <div className="text-3xl mb-2">üìã</div>
              <h4 className="font-sans font-medium text-text-primary">
                –ê–Ω–∫–µ—Ç–∞
              </h4>
              <p className="text-sm text-text-secondary mt-1">
                {hasCompletedQuiz ? '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}
              </p>
            </Card>
          </Link>
        </div>
      </div>
    </div>
  );
}