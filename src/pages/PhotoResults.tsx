import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";

const Button = ({ children, onClick, variant = "primary", ...props }: any) => {
  const baseClass = "inline-flex items-center justify-center rounded-xl transition focus:outline-none px-4 py-2";
  const variantClass = variant === "primary" ? "border border-black hover:bg-black hover:text-white" :
                      variant === "secondary" ? "border border-neutral-300 hover:border-black" :
                      "border border-transparent hover:bg-neutral-100";
  
  return (
    <button onClick={onClick} className={`${baseClass} ${variantClass}`} {...props}>
      {children}
    </button>
  );
};

const Card = ({ children, className = "" }: { children: React.ReactNode; className?: string }) => (
  <div className={`rounded-2xl border border-neutral-200 bg-white shadow-sm ${className}`}>
    {children}
  </div>
);

export default function PhotoResults() {
  const navigate = useNavigate();
  const location = useLocation();
  const [analysisData, setAnalysisData] = useState<any>(null);
  const [selectedProblem, setSelectedProblem] = useState<any | null>(null);

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ state –∏–ª–∏ localStorage
    const data = location.state?.analysisData || getLatestPhotoAnalysis();
    if (data) {
      setAnalysisData(data);
    } else {
      navigate("/photo");
    }
  }, [location, navigate]);

  function getLatestPhotoAnalysis() {
    try {
      const answers = localStorage.getItem("skiniq.answers");
      if (!answers) return null;
      const parsed = JSON.parse(answers);
      return parsed.photo_analysis || null;
    } catch {
      return null;
    }
  }

  const saveAndContinue = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –æ—Ç–≤–µ—Ç—ã –∞–Ω–∫–µ—Ç—ã
    try {
      const answers = JSON.parse(localStorage.getItem("skiniq.answers") || "{}");
      const updatedAnswers = {
        ...answers,
        photo_analysis: analysisData,
        hasPhotoAnalysis: true
      };
      localStorage.setItem("skiniq.answers", JSON.stringify(updatedAnswers));
    } catch {}
    
    navigate("/plan");
  };

  const retakePhoto = () => {
    navigate("/photo");
  };

  if (!analysisData) {
    return (
      <div className="max-w-3xl mx-auto px-4 py-6">
        <Card className="p-6 text-center">
          <h2 className="text-lg font-bold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
          <p className="text-zinc-600 mb-4">–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
          <Button onClick={() => navigate("/photo")}>
            –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ç–æ-—Å–∫–∞–Ω—É
          </Button>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto px-4 py-6">
      <div className="mb-4">
        <button 
          onClick={() => navigate(-1)}
          className="text-sm text-zinc-600 hover:text-zinc-800"
        >
          ‚Üê –ù–∞–∑–∞–¥
        </button>
      </div>

      <Card className="p-6">
        <h1 className="text-2xl font-bold mb-4 text-center">üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h1>
        
        {/* –§–æ—Ç–æ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ */}
        <div className="relative inline-block mb-6 w-full flex justify-center">
          <img 
            src={analysisData.imageUrl || analysisData.preview} 
            alt="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º–æ–µ —Ñ–æ—Ç–æ" 
            className="max-h-96 rounded-xl border shadow-lg"
          />
          
          {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ */}
          {analysisData.problemAreas?.map((area: any, idx: number) => {
            const colors = {
              '–∞–∫–Ω–µ': 'border-red-500 bg-red-500/30',
              '–∂–∏—Ä–Ω–æ—Å—Ç—å': 'border-yellow-500 bg-yellow-500/30', 
              '–ø–æ—Ä—ã': 'border-orange-500 bg-orange-500/30',
              '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ': 'border-pink-500 bg-pink-500/30',
              '—Å—É—Ö–æ—Å—Ç—å': 'border-blue-500 bg-blue-500/30'
            };
            
            const colorClass = colors[area.type as keyof typeof colors] || 'border-red-500 bg-red-500/30';
            
            return (
              <div key={idx} className="absolute">
                <div
                  className={`absolute border-3 rounded-lg cursor-pointer hover:opacity-80 transition ${colorClass}`}
                  style={{
                    left: `${area.coordinates?.x || 0}%`,
                    top: `${area.coordinates?.y || 0}%`,
                    width: `${area.coordinates?.width || 10}%`,
                    height: `${area.coordinates?.height || 10}%`,
                  }}
                  onClick={() => setSelectedProblem(selectedProblem?.type === area.type ? null : area)}
                />
                
                <div
                  className="absolute text-sm font-bold px-3 py-1 rounded-full bg-white border-2 shadow-lg whitespace-nowrap pointer-events-none"
                  style={{
                    left: `${(area.coordinates?.x || 0) + (area.coordinates?.width || 10)}%`,
                    top: `${area.coordinates?.y || 0}%`,
                    transform: 'translateX(8px)'
                  }}
                >
                  {area.type}
                </div>
              </div>
            );
          })}
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        <div className="space-y-4 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 rounded-xl bg-blue-50 border border-blue-200">
              <div className="text-sm text-blue-600 mb-1">–¢–∏–ø –∫–æ–∂–∏</div>
              <div className="text-lg font-bold">{analysisData.skinType}</div>
            </div>
            <div className="text-center p-4 rounded-xl bg-green-50 border border-green-200">
              <div className="text-sm text-green-600 mb-1">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
              <div className="text-lg font-bold">{Math.round((analysisData.confidence || 0) * 100)}%</div>
            </div>
            <div className="text-center p-4 rounded-xl bg-purple-50 border border-purple-200">
              <div className="text-sm text-purple-600 mb-1">–ü—Ä–æ–±–ª–µ–º—ã</div>
              <div className="text-sm font-medium">{analysisData.concerns?.length || 0} –Ω–∞–π–¥–µ–Ω–æ</div>
            </div>
          </div>

          {/* –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã */}
          {selectedProblem && (
            <Card className="p-4 border-l-4 border-blue-500 bg-blue-50">
              <div className="font-bold mb-2">
                üéØ {selectedProblem.type} 
                <span className="ml-2 text-sm font-normal text-zinc-600">
                  ({selectedProblem.severity === 'high' ? '–≤—ã—Å–æ–∫–∞—è' : selectedProblem.severity === 'medium' ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è'} —Å—Ç–µ–ø–µ–Ω—å)
                </span>
              </div>
              <div className="text-sm text-zinc-700 mb-3">{selectedProblem.description}</div>
              
              <div className="text-sm">
                <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                {selectedProblem.type === '–∞–∫–Ω–µ' && " BHA 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, —Ç–æ—á–µ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∏–∑–±–µ–≥–∞—Ç—å –ø–µ—Ä–µ—Å—É—à–∏–≤–∞–Ω–∏—è"}
                {selectedProblem.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' && " –õ—ë–≥–∫–∏–µ –≥–µ–ª–∏, –º–∞—Ç–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ —É—Ç—Ä–æ–º"}
                {selectedProblem.type === '–ø–æ—Ä—ã' && " BHA, —Ä–µ—Ç–∏–Ω–æ–∏–¥—ã, –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ—Ä"}
                {selectedProblem.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ' && " –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Ü–∏–∫–∞, –ø–∞–Ω—Ç–µ–Ω–æ–ª, –∏–∑–±–µ–≥–∞—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤"}
                {selectedProblem.type === '—Å—É—Ö–æ—Å—Ç—å' && " –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ, –∫–µ—Ä–∞–º–∏–¥—ã, –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"}
              </div>
            </Card>
          )}

          {!selectedProblem && (
            <div className="text-center text-sm text-zinc-500">
              üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Ü–≤–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            </div>
          )}
        </div>

        {/* –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
        {analysisData.recommendations && (
          <Card className="p-4 mb-6">
            <h3 className="font-bold mb-3">üìã –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <ul className="space-y-2">
              {analysisData.recommendations.map((rec: string, idx: number) => (
                <li key={idx} className="flex items-start gap-2">
                  <span className="text-blue-500 mt-1">‚Ä¢</span>
                  <span className="text-sm">{rec}</span>
                </li>
              ))}
            </ul>
          </Card>
        )}

        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        <div className="flex flex-col sm:flex-row gap-3">
          <Button onClick={saveAndContinue} className="flex-1">
            üíé –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
          </Button>
          <Button variant="secondary" onClick={retakePhoto} className="flex-1">
            üì∑ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
          </Button>
        </div>
      </Card>
    </div>
  );
}