import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { analyzeSkinPhoto } from "../lib/skinAnalysis";

const Button = ({ children, onClick, disabled, variant = "primary", ...props }: any) => {
  const baseClass = "inline-flex items-center justify-center rounded-xl transition focus:outline-none disabled:opacity-50 disabled:pointer-events-none px-4 py-2";
  const variantClass = variant === "primary" ? "border border-black hover:bg-black hover:text-white" :
                      "border border-transparent hover:bg-neutral-100";
  
  return (
    <button 
      disabled={disabled}
      onClick={onClick} 
      className={`${baseClass} ${variantClass}`} 
      {...props}
    >
      {children}
    </button>
  );
};

const Card = ({ children, className = "" }: { children: React.ReactNode; className?: string }) => (
  <div className={`rounded-2xl border border-neutral-200 bg-white shadow-sm ${className}`}>
    {children}
  </div>
);

async function readFileAsDataURL(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = () => reject(new Error("Failed to read file"));
    reader.onload = () => resolve(String(reader.result));
    reader.readAsDataURL(file);
  });
}

export default function Photo() {
  const navigate = useNavigate();
  const [showHowTo, setShowHowTo] = useState(() => 
    typeof window !== "undefined" ? localStorage.getItem("photo.hideHowto") !== "1" : true
  );
  const [dontShowAgain, setDontShowAgain] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<any>(null);
  const [selectedProblem, setSelectedProblem] = useState<any | null>(null);
  const [history, setHistory] = useState<any[]>(() => {
    if (typeof window === "undefined") return [];
    try {
      const stored = localStorage.getItem("skiniq.photo.history");
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  });

  useEffect(() => {
    if (typeof window !== "undefined") {
      try {
        localStorage.setItem("skiniq.photo.history", JSON.stringify(history));
      } catch {}
    }
  }, [history]);

  const dismissHowTo = () => {
    setShowHowTo(false);
    if (dontShowAgain && typeof window !== "undefined") {
      try {
        localStorage.setItem("photo.hideHowto", "1");
      } catch {}
    }
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) {
      setSelectedFile(null);
      setPreviewUrl(null);
      setError("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JPG/PNG –¥–æ 10 –ú–ë.");
      return;
    }

    const file = files[0];
    if (!["image/jpeg", "image/png", "image/jpg"].includes(file.type)) {
      setSelectedFile(null);
      setPreviewUrl(null);
      setError("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ó–∞–≥—Ä—É–∑–∏—Ç–µ JPG/PNG –¥–æ 10 –ú–ë.");
      event.currentTarget.value = "";
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      setSelectedFile(null);
      setPreviewUrl(null);
      setError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë.");
      event.currentTarget.value = "";
      return;
    }

    setError(null);
    setSelectedFile(file);
    readFileAsDataURL(file)
      .then(dataUrl => setPreviewUrl(dataUrl))
      .catch(() => setPreviewUrl(null));
  };

  const resetScan = () => {
    setError(null);
    setSelectedFile(null);
    setPreviewUrl(null);
    setIsAnalyzing(false);
    setAnalysisResult(null);
    setSelectedProblem(null);
  };

  const analyzePhoto = async () => {
    if (selectedFile && previewUrl) {
      setIsAnalyzing(true);
      try {
        const analysis = await analyzeSkinPhoto(previewUrl);
        
        const result = {
          skinType: analysis.skinType,
          concerns: analysis.concerns,
          timestamp: Date.now(),
          previewDataUrl: previewUrl,
          problemAreas: analysis.problemAreas,
          recommendations: analysis.recommendations,
          confidence: analysis.confidence
        };

        // Add to history
        setHistory(prev => [result, ...prev].slice(0, 20));
        setAnalysisResult(result);
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ answers –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Quiz
        try {
          const existingAnswers = localStorage.getItem("skiniq.answers");
          const answers = existingAnswers ? JSON.parse(existingAnswers) : {};
          const updatedAnswers = {
            ...answers,
            photo_data_url: previewUrl,
            photo_analysis: analysis,
            photo_scans: [...(answers.photo_scans || []), {
              ts: Date.now(),
              preview: previewUrl,
              analysis,
              problemAreas: analysis.problemAreas
            }]
          };
          localStorage.setItem("skiniq.answers", JSON.stringify(updatedAnswers));
        } catch (syncError) {
          console.error('Error syncing to answers:', syncError);
        }
      } catch (err) {
        setError("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.");
      } finally {
        setIsAnalyzing(false);
      }
    }
  };

  const createPlan = () => {
    if (analysisResult) {
      // Save analysis to localStorage
      if (typeof window !== "undefined") {
        try {
          const existingAnswers = localStorage.getItem("skiniq.answers");
          const answers = {
            ...(existingAnswers ? JSON.parse(existingAnswers) : {}),
            source: "photo",
            analysis: analysisResult
          };
          localStorage.setItem("skiniq.answers", JSON.stringify(answers));
        } catch {}
      }
      navigate("/plan");
    }
  };

  const removeFromHistory = (index: number) => {
    setHistory(prev => {
      const newHistory = [...prev];
      newHistory.splice(index, 1);
      return newHistory;
    });
  };

  return (
    <div className="space-y-4">
      <div className="text-center">
        <h1 className="text-xl sm:text-2xl font-bold mb-2">üì∏ –°–∫–∞–Ω –ø–æ —Ñ–æ—Ç–æ</h1>
        <p className="text-sm text-neutral-600">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏</p>
      </div>
      
      <Card className="p-4">
        <div className="flex items-start justify-between gap-3">
          <div>
            <h2 className="text-lg font-medium">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ</h2>
            <p className="text-sm text-neutral-600">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG/PNG –¥–æ 10 –ú–ë.</p>
          </div>
          <div>
            <button
              type="button"
              className="inline-flex items-center justify-center rounded-xl transition focus:outline-none disabled:opacity-50 disabled:pointer-events-none px-4 py-2 border border-transparent hover:bg-neutral-100"
              onClick={() => setShowHowTo(prev => !prev)}
            >
              –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ?
            </button>
          </div>
        </div>

        {showHowTo && (
          <div className="mt-3 rounded-xl bg-neutral-50 border border-neutral-200 p-3" data-testid="howto">
            <p className="text-sm text-neutral-700">
              –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–∞–∫–∏—è–∂–∞.
            </p>
            <div className="mt-3 flex items-center gap-3">
              <label className="inline-flex items-center gap-2 text-sm">
                <input
                  type="checkbox"
                  checked={dontShowAgain}
                  onChange={e => setDontShowAgain(e.target.checked)}
                />
                –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
              </label>
              <button
                type="button"
                className="text-sm px-3 py-1 rounded border hover:bg-neutral-100"
                onClick={dismissHowTo}
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        {!analysisResult && !isAnalyzing && (
          <div className="mt-4 space-y-3">
            <div className="flex flex-col gap-2 sm:flex-row sm:items-center">
              <input
                data-testid="file-gallery"
                type="file"
                accept="image/*,.jpg,.jpeg,.png"
                onChange={handleFileChange}
              />
              <label className="text-xs text-neutral-500">
                –§–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤.
              </label>
            </div>

            <div role="alert" aria-live="assertive" className={error ? "text-sm text-red-600 mt-1" : "sr-only"}>
              {error ?? ""}
            </div>

            {previewUrl && !analysisResult && (
              <div className="pt-2">
                <img
                  src={previewUrl}
                  alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ"
                  className="w-full max-h-72 object-contain rounded-xl border"
                  data-testid="preview"
                />
              </div>
            )}

            <div className="pt-2 flex gap-2">
              <Button
                disabled={!selectedFile || !!error || isAnalyzing}
                onClick={analyzePhoto}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–Ω–∞–ª–∏–∑
              </Button>
              <Button variant="ghost" onClick={resetScan}>
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω
              </Button>
            </div>
          </div>
        )}

        {isAnalyzing && (
          <div className="mt-4">
            <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...</p>
          </div>
        )}

        {analysisResult && !isAnalyzing && (
          <div className="mt-4 space-y-3">
            {/* –§–æ—Ç–æ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ */}
            <div className="relative">
              <img
                src={analysisResult.previewDataUrl || previewUrl}
                alt="–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ"
                className="w-full max-h-72 object-contain rounded-xl border"
              />
              
              {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ */}
              {analysisResult?.problemAreas?.map((area: any, idx: number) => {
                console.log('Rendering area:', area); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                
                
                return (
                  <div key={idx}>
                    {/* –¶–≤–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ - –æ—Ä–≥–∞–Ω–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
                    <div
                      className="absolute cursor-pointer hover:scale-110 transition-all duration-300"
                      style={{
                        left: `${area.coordinates?.x || 0}%`,
                        top: `${area.coordinates?.y || 0}%`,
                        width: `${area.coordinates?.width || 15}%`,
                        height: `${area.coordinates?.height || 15}%`,
                        zIndex: 10,
                        minWidth: '60px',
                        minHeight: '40px'
                      }}
                      onClick={() => setSelectedProblem(selectedProblem?.type === area.type ? null : area)}
                    >
                      {/* –¢–æ—á–µ—á–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ö */}
                      <div
                        className="w-full h-full relative flex items-center justify-center"
                        style={{
                          background: area.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' ? 'rgba(234, 179, 8, 0.9)' : 
                                     area.type === '–∞–∫–Ω–µ' ? 'rgba(239, 68, 68, 0.9)' :
                                     area.type === '–ø–æ—Ä—ã' ? 'rgba(249, 115, 22, 0.9)' :
                                     area.type === '–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' ? 'rgba(147, 51, 234, 0.9)' :
                                     area.type === '—Å—É—Ö–æ—Å—Ç—å' ? 'rgba(59, 130, 246, 0.9)' :
                                     area.type === '–º–æ—Ä—â–∏–Ω—ã' ? 'rgba(107, 114, 128, 0.9)' :
                                     area.type === '—á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏' ? 'rgba(0, 0, 0, 0.95)' :
                                     area.type === '—Ç–µ–∫—Å—Ç—É—Ä–∞' ? 'rgba(79, 70, 229, 0.9)' :
                                     area.type === '—Ç–æ–Ω' ? 'rgba(217, 119, 6, 0.9)' :
                                     area.type === '—É–ø—Ä—É–≥–æ—Å—Ç—å' ? 'rgba(5, 150, 105, 0.9)' :
                                     area.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è' ? 'rgba(236, 72, 153, 0.9)' : 'rgba(99, 102, 241, 0.9)',
                          borderRadius: area.type === '–º–æ—Ä—â–∏–Ω—ã' ? '50px' : 
                                       area.type === '–ø–æ—Ä—ã' ? '50%' :
                                       area.type === '—á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏' ? '50%' :
                                       area.type === '–∞–∫–Ω–µ' ? '60% 40% 50% 70%' :
                                       '45% 55% 60% 40%',
                          border: `2px solid ${
                            area.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' ? '#eab308' : 
                            area.type === '–∞–∫–Ω–µ' ? '#ef4444' :
                            area.type === '–ø–æ—Ä—ã' ? '#f97316' :
                            area.type === '–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' ? '#9333ea' :
                            area.type === '—Å—É—Ö–æ—Å—Ç—å' ? '#3b82f6' :
                            area.type === '–º–æ—Ä—â–∏–Ω—ã' ? '#6b7280' :
                            area.type === '—á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏' ? '#000000' :
                            area.type === '—Ç–µ–∫—Å—Ç—É—Ä–∞' ? '#4f46e5' :
                            area.type === '—Ç–æ–Ω' ? '#d97706' :
                            area.type === '—É–ø—Ä—É–≥–æ—Å—Ç—å' ? '#059669' :
                            area.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è' ? '#ec4899' : '#6366f1'
                          }`,
                          boxShadow: `0 0 15px ${
                            area.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' ? 'rgba(234, 179, 8, 0.7)' : 
                            area.type === '–∞–∫–Ω–µ' ? 'rgba(239, 68, 68, 0.7)' :
                            area.type === '–ø–æ—Ä—ã' ? 'rgba(249, 115, 22, 0.7)' :
                            area.type === '–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' ? 'rgba(147, 51, 234, 0.7)' :
                            area.type === '—Å—É—Ö–æ—Å—Ç—å' ? 'rgba(59, 130, 246, 0.7)' :
                            area.type === '–º–æ—Ä—â–∏–Ω—ã' ? 'rgba(107, 114, 128, 0.7)' :
                            'rgba(99, 102, 241, 0.7)'
                          }, inset 0 1px 2px rgba(255,255,255,0.3)`
                        }}
                      >
                        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ */}
                        <div 
                          className="w-2 h-2 rounded-full bg-white/80"
                          style={{
                            boxShadow: '0 0 4px rgba(0,0,0,0.5)'
                          }}
                        />
                      </div>
                    </div>
                    
                    {/* –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã - —è—Ä–∫–∞—è –∏ –∑–∞–º–µ—Ç–Ω–∞—è */}
                    <div
                      className="absolute text-sm font-bold px-3 py-1.5 rounded-full bg-white border-3 shadow-xl whitespace-nowrap pointer-events-none animate-bounce"
                      style={{
                        left: `${(area.coordinates?.x || 0) + (area.coordinates?.width || 15) + 3}%`,
                        top: `${(area.coordinates?.y || 0) + 8}%`,
                        zIndex: 20,
                        color: area.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' ? '#d97706' : 
                               area.type === '–∞–∫–Ω–µ' ? '#dc2626' :
                               area.type === '–ø–æ—Ä—ã' ? '#ea580c' :
                               area.type === '–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' ? '#9333ea' :
                               area.type === '—Å—É—Ö–æ—Å—Ç—å' ? '#2563eb' :
                               area.type === '–º–æ—Ä—â–∏–Ω—ã' ? '#4b5563' :
                               area.type === '—á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏' ? '#000000' :
                               area.type === '—Ç–µ–∫—Å—Ç—É—Ä–∞' ? '#4f46e5' :
                               area.type === '—Ç–æ–Ω' ? '#d97706' :
                               area.type === '—É–ø—Ä—É–≥–æ—Å—Ç—å' ? '#059669' :
                               area.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è' ? '#ec4899' : '#6366f1',
                        borderColor: area.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' ? '#d97706' : 
                                     area.type === '–∞–∫–Ω–µ' ? '#dc2626' :
                                     area.type === '–ø–æ—Ä—ã' ? '#ea580c' :
                                     area.type === '–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' ? '#9333ea' :
                                     area.type === '—Å—É—Ö–æ—Å—Ç—å' ? '#2563eb' :
                                     area.type === '–º–æ—Ä—â–∏–Ω—ã' ? '#4b5563' :
                                     area.type === '—á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏' ? '#000000' :
                                     area.type === '—Ç–µ–∫—Å—Ç—É—Ä–∞' ? '#4f46e5' :
                                     area.type === '—Ç–æ–Ω' ? '#d97706' :
                                     area.type === '—É–ø—Ä—É–≥–æ—Å—Ç—å' ? '#059669' :
                                     area.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è' ? '#ec4899' : '#6366f1'
                      }}
                    >
                      {area.type.toUpperCase()}
                    </div>
                  </div>
                );
              })}
            </div>
            
            <div className="bg-green-50 border border-green-200 rounded-xl p-4">
              <h3 className="text-lg font-medium text-green-700 mb-3">‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!</h3>
              
              {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∫ —É HautAI */}
              {analysisResult.metrics && (
                <div className="space-y-3 mb-4">
                  <h4 className="text-sm font-bold text-gray-700 mb-3">üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h4>
                  <div className="grid grid-cols-1 gap-4">
                    {Object.entries(analysisResult.metrics).map(([key, metric]: [string, any]) => {
                      const getScoreColor = (score: number) => {
                        if (score <= 30) return '#10b981'; // green
                        if (score <= 60) return '#f59e0b'; // yellow
                        return '#ef4444'; // red
                      };
                      
                      const getScoreLevel = (score: number) => {
                        if (score <= 30) return '–•–æ—Ä–æ—à–æ';
                        if (score <= 60) return '–£–º–µ—Ä–µ–Ω–Ω–æ';
                        return '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è';
                      };

                      const metricLabels: Record<string, string> = {
                        skinType: '–¢–∏–ø –∫–æ–∂–∏',
                        skinColor: '–¶–≤–µ—Ç –∫–æ–∂–∏', 
                        perceivedAge: '–í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç',
                        eyeAge: '–í–æ–∑—Ä–∞—Å—Ç –≥–ª–∞–∑',
                        redness: '–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ',
                        evenness: '–û–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å',
                        acne: '–ê–∫–Ω–µ',
                        wrinkles: '–ú–æ—Ä—â–∏–Ω—ã',
                        darkCircles: '–¢–µ–º–Ω—ã–µ –∫—Ä—É–≥–∏',
                        pores: '–ü–æ—Ä—ã',
                        oiliness: '–ñ–∏—Ä–Ω–æ—Å—Ç—å',
                        hydration: '–£–≤–ª–∞–∂–Ω–µ–Ω–Ω–æ—Å—Ç—å'
                      };

                      return (
                        <div key={key} className="bg-white rounded-xl p-4 border border-gray-200 shadow-sm hover:shadow-md transition-shadow">
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="text-sm text-gray-600 mb-1">{metricLabels[key]}</div>
                              <div className="font-semibold text-gray-900">{metric.value}</div>
                              <div className="text-xs text-gray-500 mt-1">{getScoreLevel(metric.score)}</div>
                            </div>
                            
                            {/* –ö—Ä—É–≥–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–∫ —É HautAI */}
                            <div className="relative w-16 h-16">
                              <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 64 64">
                                <circle
                                  cx="32" cy="32" r="28"
                                  fill="none"
                                  stroke="#e5e7eb"
                                  strokeWidth="6"
                                />
                                <circle
                                  cx="32" cy="32" r="28"
                                  fill="none"
                                  stroke={getScoreColor(metric.score)}
                                  strokeWidth="6"
                                  strokeLinecap="round"
                                  strokeDasharray={`${metric.score * 1.76} 176`}
                                  className="transition-all duration-1000"
                                />
                              </svg>
                              <div className="absolute inset-0 flex flex-col items-center justify-center">
                                <span className="text-lg font-bold" style={{color: getScoreColor(metric.score)}}>
                                  {metric.score}
                                </span>
                                <span className="text-xs text-gray-500">–∏–∑ 100</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              <div className="space-y-2 text-sm">
                <div><strong>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:</strong> {Math.round((analysisResult.confidence || 0) * 100)}% —Ç–æ—á–Ω–æ—Å—Ç—å</div>
                <div><strong>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:</strong> {analysisResult.problemAreas?.length || 0} –∑–æ–Ω</div>
              </div>
            </div>
            
            {/* –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ */}
            {selectedProblem && (
              <div className="p-3 rounded-xl border-l-4 border-blue-500 bg-blue-50">
                <div className="text-sm font-medium mb-1">
                  üéØ {selectedProblem.type} ({selectedProblem.severity === 'high' ? '–≤—ã—Å–æ–∫–∞—è' : selectedProblem.severity === 'medium' ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è'} —Å—Ç–µ–ø–µ–Ω—å)
                </div>
                <div className="text-xs text-zinc-600 mb-2">{selectedProblem.description}</div>
                
                {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã */}
                <div className="text-xs text-zinc-700">
                  <strong>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</strong>
                  {selectedProblem.type === '–∞–∫–Ω–µ' && " BHA 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, —Ç–æ—á–µ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–µ–Ω–∑–æ–∏–ª–ø–µ—Ä–æ–∫—Å–∏–¥–æ–º"}
                  {selectedProblem.type === '–∂–∏—Ä–Ω–æ—Å—Ç—å' && " –õ—ë–≥–∫–∏–µ –≥–µ–ª–∏, –º–∞—Ç–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ 5-10%"}
                  {selectedProblem.type === '–ø–æ—Ä—ã' && " BHA, —Ä–µ—Ç–∏–Ω–æ–∏–¥—ã, –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ—Ä"}
                  {selectedProblem.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ' && " –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Ü–∏–∫–∞, –ø–∞–Ω—Ç–µ–Ω–æ–ª"}
                  {selectedProblem.type === '–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è' && " –£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Ü–∏–∫–∞, –ø–∞–Ω—Ç–µ–Ω–æ–ª"}
                  {selectedProblem.type === '—Å—É—Ö–æ—Å—Ç—å' && " –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ, –∫–µ—Ä–∞–º–∏–¥—ã, –≥–∏–∞–ª—É—Ä–æ–Ω–∫–∞"}
                  {selectedProblem.type === '–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' && " –í–∏—Ç–∞–º–∏–Ω C 10-20%, –∞—Ä–±—É—Ç–∏–Ω, –∫–æ–π–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"}
                  {selectedProblem.type === '–º–æ—Ä—â–∏–Ω—ã' && " –†–µ—Ç–∏–Ω–æ–ª 0.25-1%, –ø–µ–ø—Ç–∏–¥—ã, –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"}
                  {selectedProblem.type === '—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' && " –ú—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –±–µ–∑ –æ—Ç–¥—É—à–µ–∫, —Ü–∏–∫–∞"}
                  {selectedProblem.type === '—á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏' && " BHA –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –≥–ª–∏–Ω—è–Ω—ã–µ –º–∞—Å–∫–∏ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"}
                  {selectedProblem.type === '—Ç–µ–∫—Å—Ç—É—Ä–∞' && " AHA-–ø–∏–ª–∏–Ω–≥–∏, —Ä–µ—Ç–∏–Ω–æ–ª, —ç–Ω–∑–∏–º–Ω—ã–µ –º–∞—Å–∫–∏"}
                  {selectedProblem.type === '—Ç–æ–Ω' && " –í–∏—Ç–∞–º–∏–Ω C, –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥, –æ—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ AHA"}
                  {selectedProblem.type === '—É–ø—Ä—É–≥–æ—Å—Ç—å' && " –ü–µ–ø—Ç–∏–¥—ã, –≤–∏—Ç–∞–º–∏–Ω C, –º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞, —Ä–µ—Ç–∏–Ω–æ–ª"}
                </div>
              </div>
            )}
            
            <div className="text-xs text-zinc-500 text-center">
              üí° –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ü–≤–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            </div>
            
            {analysisResult.recommendations && (
              <div>
                <div className="text-sm font-medium mb-2">–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</div>
                <ul className="text-xs text-zinc-600 list-disc list-inside space-y-1">
                  {analysisResult.recommendations.map((rec: string, idx: number) => (
                    <li key={idx}>{rec}</li>
                  ))}
                </ul>
              </div>
            )}
            
            <div className="pt-2 flex gap-2">
              <Button onClick={createPlan} className="flex-1">
                –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —É—Ö–æ–¥–∞
              </Button>
              <Button variant="ghost" onClick={resetScan}>
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω
              </Button>
            </div>
          </div>
        )}
      </Card>

      {history.length > 0 && (
        <div className="mt-6">
          <Card className="p-4">
            <h3 className="text-lg font-medium mb-2">–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–æ–≤</h3>
            <ul className="space-y-3">
              {history.map((item, index) => (
                <li key={`${item.timestamp}-${index}`} className="border border-neutral-200 rounded-xl p-3">
                  <div className="flex items-center gap-3">
                    {item.previewDataUrl && (
                      <div 
                        className="w-16 h-16 rounded-lg overflow-hidden cursor-pointer border-2 border-blue-200 hover:border-blue-400 transition"
                        onClick={() => {
                          setAnalysisResult({
                            ...item,
                            previewDataUrl: item.previewDataUrl
                          });
                          setSelectedProblem(null);
                        }}
                      >
                        <img
                          src={item.previewDataUrl}
                          alt="–ö–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
                          className="w-full h-full object-cover"
                        />
                      </div>
                    )}
                    <div className="text-sm flex-1">
                      <div className="font-medium">
                        {new Date(item.timestamp).toLocaleString()}
                      </div>
                      <div className="text-neutral-600">
                        {item.skinType}; {item.concerns?.join(", ") || "–∞–Ω–∞–ª–∏–∑"}
                      </div>
                      <div className="text-xs text-blue-600 mt-1">
                        üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∑–æ–Ω–∞–º–∏
                      </div>
                    </div>
                    <button
                      type="button"
                      className="text-sm text-red-600 underline"
                      onClick={() => removeFromHistory(index)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </li>
              ))}
            </ul>
          </Card>
        </div>
      )}
    </div>
  );
}