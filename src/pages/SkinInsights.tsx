import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { type SkinMetrics } from '../components/SkinAnalysis';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
const getPhotoData = () => {
  try {
    const raw = localStorage.getItem("skinplan_answers");
    if (!raw) return null;
    const data = JSON.parse(raw);
    return {
      photo_data_url: data.photo_data_url,
      photo_analysis: data.photo_analysis,
      photo_metrics: data.photo_metrics,
      photo_zones: data.photo_zones,
      photo_scans: data.photo_scans || []
    };
  } catch {
    return null;
  }
};

const getMetricColor = (value: number): string => {
  if (value <= 30) return 'text-green-600';
  if (value <= 60) return 'text-yellow-600';
  return 'text-red-600';
};


const getMetricStatus = (key: string, value: number): string => {
  const statusMap: Record<string, { good: string, medium: string, bad: string }> = {
    acne: { good: '–ß–∏—Å—Ç–∞—è –∫–æ–∂–∞', medium: '–ï–¥–∏–Ω–∏—á–Ω—ã–µ –≤—ã—Å—ã–ø–∞–Ω–∏—è', bad: '–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –≤—ã—Å—ã–ø–∞–Ω–∏—è' },
    pores: { good: '–ü–æ—Ä—ã –Ω–µ –∑–∞–º–µ—Ç–Ω—ã', medium: '–ü–æ—Ä—ã —Å–ª–µ–≥–∫–∞ –≤–∏–¥–Ω—ã', bad: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã' },
    wrinkles: { good: '–ì–ª–∞–¥–∫–∞—è –∫–æ–∂–∞', medium: '–ú–∏–º–∏—á–µ—Å–∫–∏–µ –º–æ—Ä—â–∏–Ω—ã', bad: '–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –º–æ—Ä—â–∏–Ω—ã' },
    pigmentation: { good: '–†–æ–≤–Ω—ã–π —Ç–æ–Ω', medium: '–õ–µ–≥–∫–∞—è –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è', bad: '–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è' },
    redness: { good: '–°–ø–æ–∫–æ–π–Ω–∞—è –∫–æ–∂–∞', medium: '–õ–µ–≥–∫–∏–µ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è', bad: '–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è' },
    oiliness: { good: '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞', medium: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∂–∏—Ä–Ω–æ—Å—Ç—å', bad: '–û—á–µ–Ω—å –∂–∏—Ä–Ω–∞—è –∫–æ–∂–∞' },
    hydration: { good: '–•–æ—Ä–æ—à–æ —É–≤–ª–∞–∂–Ω–µ–Ω–∞', medium: '–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è', bad: '–°—É—Ö–∞—è –∫–æ–∂–∞' },
    elasticity: { good: '–£–ø—Ä—É–≥–∞—è –∫–æ–∂–∞', medium: '–°–Ω–∏–∂–µ–Ω–∞ —É–ø—Ä—É–≥–æ—Å—Ç—å', bad: '–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏' }
  };

  const status = statusMap[key];
  if (!status) return '';

  if (key === 'hydration') {
    // –î–ª—è —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–∞—è - –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–æ—Ä–æ—à–æ
    if (value >= 70) return status.good;
    if (value >= 40) return status.medium;
    return status.bad;
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π - –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–æ—Ä–æ—à–æ
    if (value <= 30) return status.good;
    if (value <= 60) return status.medium;
    return status.bad;
  }
};

const metricLabels: Record<string, string> = {
  acne: '–ê–∫–Ω–µ',
  pores: '–ü–æ—Ä—ã', 
  wrinkles: '–ú–æ—Ä—â–∏–Ω—ã',
  pigmentation: '–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è',
  redness: '–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è',
  oiliness: '–ñ–∏—Ä–Ω–æ—Å—Ç—å',
  hydration: '–£–≤–ª–∞–∂–Ω–µ–Ω–Ω–æ—Å—Ç—å',
  elasticity: '–≠–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å',
  texture: '–¢–µ–∫—Å—Ç—É—Ä–∞',
  brightness: '–°–∏—è–Ω–∏–µ',
  evenness: '–†–æ–≤–Ω–æ—Å—Ç—å',
  puffiness: '–û—Ç–µ—á–Ω–æ—Å—Ç—å'
};

const getRecommendations = (metrics: SkinMetrics): string[] => {
  const recommendations = [];

  if (metrics.acne > 50) {
    recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π –∏–ª–∏ –±–µ–Ω–∑–æ–∏–ª–ø–µ—Ä–æ–∫—Å–∏–¥–æ–º');
  }
  if (metrics.oiliness > 60) {
    recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –≤ —É—Ö–æ–¥ –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∂–∏—Ä–Ω–æ—Å—Ç–∏');
  }
  if (metrics.hydration < 40) {
    recommendations.push('–£–≤–µ–ª–∏—á—å—Ç–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã');
  }
  if (metrics.pigmentation > 40) {
    recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∏—Ç–∞–º–∏–Ω–∞ C –∏ –∞—Ä–±—É—Ç–∏–Ω–∞');
  }
  if (metrics.wrinkles > 50) {
    recommendations.push('–í–∫–ª—é—á–∏—Ç–µ —Ä–µ—Ç–∏–Ω–æ–∏–¥—ã –≤ –≤–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥');
  }
  if (metrics.redness > 50) {
    recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ü–µ–Ω—Ç–µ–ª–ª–æ–π –∏–ª–∏ –Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥–æ–º');
  }
  if (metrics.pores > 70) {
    recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ BHA-–∫–∏—Å–ª–æ—Ç—ã –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è –ø–æ—Ä');
  }

  if (recommendations.length === 0) {
    recommendations.push('–í–∞—à–∞ –∫–æ–∂–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Ö–æ–¥.');
  }

  return recommendations;
};

export default function SkinInsights() {
  const navigate = useNavigate();
  const [selectedScan, setSelectedScan] = useState<number>(0);
  const photoData = getPhotoData();

  if (!photoData || !photoData.photo_scans.length) {
    return (
      <div className="max-w-3xl mx-auto p-6">
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üì∏</div>
          <h2 className="text-2xl font-bold mb-4">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏</h2>
          <p className="text-zinc-600 mb-6">
            –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          </p>
          <button 
            onClick={() => navigate("/quiz")}
            className="inline-flex items-center px-6 py-3 rounded-full bg-indigo-600 text-white hover:bg-indigo-700 transition"
          >
            –ü—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É
          </button>
        </div>
      </div>
    );
  }

  const currentScan = photoData.photo_scans[selectedScan];
  const metrics = currentScan.metrics;
  const zones = currentScan.zones;

  if (!metrics) {
    return (
      <div className="max-w-3xl mx-auto p-6">
        <div className="text-center py-12">
          <h2 className="text-2xl font-bold mb-4">–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</h2>
          <p className="text-zinc-600">–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
        </div>
      </div>
    );
  }

  const overallScore = Math.round((
    (100 - metrics.acne) + 
    (100 - metrics.redness) + 
    (100 - metrics.pigmentation) + 
    metrics.hydration + 
    metrics.elasticity
  ) / 5);

  return (
    <div className="max-w-5xl mx-auto p-6 space-y-8">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-2">üî¨ –ê–Ω–∞–ª–∏–∑ –∫–æ–∂–∏</h1>
        <p className="text-zinc-600">–î–µ—Ç–∞–ª—å–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—à–µ–π –∫–æ–∂–∏</p>
      </div>

      {/* –í—ã–±–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ */}
      {photoData.photo_scans.length > 1 && (
        <div className="bg-white/70 rounded-3xl p-6 backdrop-blur-xl border border-white/60">
          <h3 className="font-bold mb-3">–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤</h3>
          <div className="flex gap-3 overflow-x-auto">
            {photoData.photo_scans.map((scan: any, idx: number) => (
              <button
                key={idx}
                onClick={() => setSelectedScan(idx)}
                className={`flex-shrink-0 p-3 rounded-xl border transition ${
                  selectedScan === idx 
                    ? 'border-indigo-300 bg-indigo-50' 
                    : 'border-gray-200 bg-white/60 hover:bg-white/80'
                }`}
              >
                <img 
                  src={scan.preview} 
                  alt={`–ê–Ω–∞–ª–∏–∑ ${idx + 1}`}
                  className="w-16 h-16 object-cover rounded-lg mb-2"
                />
                <div className="text-xs text-center">
                  {new Date(scan.ts).toLocaleDateString()}
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ */}
      <div className="bg-gradient-to-r from-indigo-500 to-purple-600 rounded-3xl p-6 text-white">
        <div className="text-center">
          <div className="text-4xl font-bold mb-2">{overallScore}/100</div>
          <div className="text-lg">–û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–∂–∏</div>
          <div className="text-sm opacity-90 mt-1">
            {overallScore >= 80 ? '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' : 
             overallScore >= 60 ? '–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' : 
             overallScore >= 40 ? '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' : '–ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è'}
          </div>
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* –§–æ—Ç–æ —Å –∑–æ–Ω–∞–º–∏ */}
        <div className="space-y-6">
          <div className="bg-white/70 rounded-3xl p-6 backdrop-blur-xl border border-white/60">
            <h3 className="font-bold mb-4">–ó–æ–Ω—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
            <div className="relative">
              <img
                src={currentScan.preview}
                alt="–ê–Ω–∞–ª–∏–∑ –∫–æ–∂–∏"
                className="w-full rounded-2xl"
              />
              
              {zones && zones.length > 0 && (
                <div className="absolute inset-0">
                  <svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                    {zones.map((zone: any) => (
                      <rect
                        key={zone.id}
                        x={zone.x}
                        y={zone.y}
                        width={zone.width}
                        height={zone.height}
                        fill={zone.color}
                        stroke="rgba(255,255,255,0.8)"
                        strokeWidth="0.5"
                        className="cursor-pointer"
                      />
                    ))}
                  </svg>
                </div>
              )}
            </div>
            
            {zones && zones.length > 0 && (
              <div className="mt-4 grid grid-cols-2 gap-2 text-xs">
                {zones.map((zone: any) => (
                  <div key={zone.id} className="flex items-center gap-2">
                    <div 
                      className="w-3 h-3 rounded-full"
                      style={{ backgroundColor: zone.color }}
                    />
                    <span>{zone.name}</span>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* –ê–Ω–∞–ª–∏–∑ */}
          <div className="bg-white/70 rounded-3xl p-6 backdrop-blur-xl border border-white/60">
            <h3 className="font-bold mb-3">üìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h3>
            <p className="text-zinc-700 leading-relaxed">{currentScan.analysis}</p>
          </div>
        </div>

        {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
        <div className="space-y-6">
          <div className="bg-white/70 rounded-3xl p-6 backdrop-blur-xl border border-white/60">
            <h3 className="font-bold mb-4">üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–∂–∏</h3>
            <div className="space-y-4">
              {Object.entries(metrics).map(([key, value]) => {
                const numValue = value as number;
                return (
                  <div key={key} className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="font-medium">{metricLabels[key]}</span>
                      <span className={`font-bold ${getMetricColor(numValue)}`}>
                        {numValue}/100
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full transition-all ${
                          numValue <= 30 ? 'bg-green-500' : 
                          numValue <= 60 ? 'bg-yellow-500' : 'bg-red-500'
                        }`}
                        style={{ width: `${numValue}%` }}
                      />
                    </div>
                    <div className="text-sm text-zinc-600">
                      {getMetricStatus(key, numValue)}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
          <div className="bg-white/70 rounded-3xl p-6 backdrop-blur-xl border border-white/60">
            <h3 className="font-bold mb-4">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <ul className="space-y-3">
              {getRecommendations(metrics).map((rec, idx) => (
                <li key={idx} className="flex items-start gap-3">
                  <span className="text-indigo-600 mt-0.5">‚Ä¢</span>
                  <span className="text-sm text-zinc-700">{rec}</span>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex gap-4 justify-center">
        <button 
          onClick={() => navigate("/plan")}
          className="px-6 py-3 rounded-full bg-indigo-600 text-white hover:bg-indigo-700 transition"
        >
          üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞–Ω—É —É—Ö–æ–¥–∞
        </button>
        <button 
          onClick={() => navigate("/quiz")}
          className="px-6 py-3 rounded-full border border-indigo-600 text-indigo-600 hover:bg-indigo-50 transition"
        >
          üì∏ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        </button>
      </div>
    </div>
  );
}