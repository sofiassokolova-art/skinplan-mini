import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

const BOT_TOKEN = "8138388674:AAHt8HqnPS3LRwo7l_g_q1Bw05c9vTqsfEw";
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

interface PlanData {
  userName: string;
  skinType: string;
  sensitivity: boolean;
  oiliness: string;
  primaryGoal: string;
  concerns: string[];
  morningSteps: Array<{ name: string; step: string }>;
  eveningSteps: Array<{ name: string; step: string }>;
  schedule?: Array<{ day: number; morningNotes: string[]; eveningNotes: string[] }>;
}

// –ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
function getTelegramChatId(): string | null {
  if (typeof window !== 'undefined') {
    const tg = (window as any).Telegram?.WebApp;
    if (tg?.initDataUnsafe?.user?.id) {
      return tg.initDataUnsafe.user.id.toString();
    }
  }
  return null;
}


// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è PDF
function transliterate(text: string): string {
  const map: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e', '–∂': 'zh',
    '–∑': 'z', '–∏': 'i', '–π': 'j', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
    '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c',
    '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E', '–ñ': 'Zh',
    '–ó': 'Z', '–ò': 'I', '–ô': 'J', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O',
    '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'C',
    '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  };
  
  return text.replace(/[–∞-—è—ë]/gi, (char) => map[char] || char);
}

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π HTML –¥–ª—è PDF
function createPDFHTML(data: PlanData): string {
  return `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <style>
        body { 
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
          margin: 0;
          padding: 20px;
          background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
          color: #1f2937;
          line-height: 1.6;
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
          padding: 20px;
          background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
          color: white;
          border-radius: 15px;
          box-shadow: 0 10px 25px rgba(99, 102, 241, 0.2);
        }
        .title { font-size: 28px; font-weight: bold; margin-bottom: 5px; }
        .subtitle { font-size: 14px; opacity: 0.9; }
        .section {
          background: white;
          padding: 20px;
          margin-bottom: 20px;
          border-radius: 12px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
          border: 1px solid #e5e7eb;
        }
        .section-title {
          font-size: 18px;
          font-weight: bold;
          color: #374151;
          margin-bottom: 15px;
          padding-bottom: 8px;
          border-bottom: 2px solid #e5e7eb;
        }
        .info-grid {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 15px;
          margin-bottom: 15px;
        }
        .info-item {
          padding: 10px;
          background: #f9fafb;
          border-radius: 8px;
          border-left: 4px solid #6366f1;
        }
        .info-label { font-weight: 600; color: #6b7280; font-size: 12px; }
        .info-value { color: #111827; font-size: 14px; }
        .routine-list { list-style: none; padding: 0; }
        .routine-item {
          padding: 12px;
          margin-bottom: 8px;
          background: #f8fafc;
          border-radius: 8px;
          border-left: 4px solid #10b981;
          display: flex;
          align-items: center;
        }
        .routine-number {
          background: #6366f1;
          color: white;
          width: 24px;
          height: 24px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 12px;
          font-weight: bold;
          margin-right: 12px;
        }
        .footer {
          text-align: center;
          margin-top: 30px;
          padding: 15px;
          background: #f3f4f6;
          border-radius: 8px;
          font-size: 12px;
          color: #6b7280;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="title">SkinIQ - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞</div>
        <div class="subtitle">–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleDateString('ru-RU')}</div>
      </div>

      <div class="section">
        <div class="section-title">üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>
        <div class="info-grid">
          <div class="info-item">
            <div class="info-label">–ò–º—è</div>
            <div class="info-value">${data.userName}</div>
          </div>
          <div class="info-item">
            <div class="info-label">–¢–∏–ø –∫–æ–∂–∏</div>
            <div class="info-value">${data.skinType}</div>
          </div>
          <div class="info-item">
            <div class="info-label">–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
            <div class="info-value">${data.sensitivity ? '–î–∞' : '–ù–µ—Ç'}</div>
          </div>
          <div class="info-item">
            <div class="info-label">–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å</div>
            <div class="info-value">${data.primaryGoal}</div>
          </div>
        </div>
        ${data.concerns.length > 0 ? `
          <div class="info-item">
            <div class="info-label">–ü—Ä–æ–±–ª–µ–º—ã</div>
            <div class="info-value">${data.concerns.join(', ')}</div>
          </div>
        ` : ''}
      </div>

      <div class="section">
        <div class="section-title">üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥</div>
        <ul class="routine-list">
          ${data.morningSteps.map((step, index) => `
            <li class="routine-item">
              <div class="routine-number">${index + 1}</div>
              <div>
                <div style="font-weight: 600;">${step.name}</div>
                <div style="font-size: 12px; color: #6b7280;">${step.step}</div>
              </div>
            </li>
          `).join('')}
        </ul>
      </div>

      <div class="section">
        <div class="section-title">üåô –í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥</div>
        <ul class="routine-list">
          ${data.eveningSteps.map((step, index) => `
            <li class="routine-item">
              <div class="routine-number">${index + 1}</div>
              <div>
                <div style="font-weight: 600;">${step.name}</div>
                <div style="font-size: 12px; color: #6b7280;">${step.step}</div>
              </div>
            </li>
          `).join('')}
        </ul>
      </div>

      <div class="footer">
        –°–æ–∑–¥–∞–Ω–æ –≤ SkinIQ - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π
      </div>
    </body>
    </html>
  `;
}

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π PDF –∏–∑ HTML
async function generateBeautifulPDF(data: PlanData): Promise<Blob> {
  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —ç–ª–µ–º–µ–Ω—Ç
    const htmlContent = createPDFHTML(data);
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.width = '800px';
    document.body.appendChild(tempDiv);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏–∑ HTML
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      backgroundColor: '#ffffff',
      width: 800,
      height: tempDiv.scrollHeight
    });

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    document.body.removeChild(tempDiv);

    // –°–æ–∑–¥–∞–µ–º PDF
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const pageWidth = pdf.internal.pageSize.getWidth();
    const imgWidth = pageWidth - 20;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
    
    return pdf.output('blob');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ PDF:', error);
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
    return generatePDFBlob(data);
  }
}

// –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∫ fallback
function generatePDFBlob(data: PlanData): Blob {
  const doc = new jsPDF();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  doc.setFont('helvetica', 'normal');
  
  let yPos = 20;
  const lineHeight = 7;
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.text('SkinIQ - Personalnyj plan uhoda', pageWidth / 2, yPos, { align: 'center' });
  yPos += lineHeight * 2;
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Polzovatel: ${transliterate(data.userName)}`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Data: ${new Date().toLocaleDateString('ru-RU')}`, 20, yPos);
  yPos += lineHeight * 2;
  
  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–∂–∏
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Harakteristiki kozhi:', 20, yPos);
  yPos += lineHeight * 1.5;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(`Tip kozhi: ${transliterate(data.skinType)}`, 25, yPos);
  yPos += lineHeight;
  doc.text(`Chuvstvitelnost: ${data.sensitivity ? 'da' : 'net'}`, 25, yPos);
  yPos += lineHeight;
  doc.text(`Zhirnost: ${transliterate(data.oiliness)}`, 25, yPos);
  yPos += lineHeight;
  doc.text(`Cel: ${transliterate(data.primaryGoal)}`, 25, yPos);
  yPos += lineHeight * 1.5;
  
  if (data.concerns.length > 0) {
    doc.text(`Problemy: ${data.concerns.map(transliterate).join(', ')}`, 25, yPos);
    yPos += lineHeight * 2;
  }
  
  // –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Utrennij uhod:', 20, yPos);
  yPos += lineHeight * 1.5;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  data.morningSteps.forEach((step, index) => {
    doc.text(`${index + 1}. ${transliterate(step.name)}`, 25, yPos);
    yPos += lineHeight;
    if (yPos > 250) { // –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      doc.addPage();
      yPos = 20;
    }
  });
  yPos += lineHeight;
  
  // –í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Vechernij uhod:', 20, yPos);
  yPos += lineHeight * 1.5;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  data.eveningSteps.forEach((step, index) => {
    doc.text(`${index + 1}. ${transliterate(step.name)}`, 25, yPos);
    yPos += lineHeight;
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
  });
  
  // –§—É—Ç–µ—Ä
  doc.setFontSize(9);
  doc.setFont('helvetica', 'italic');
  doc.text('Sozdano v SkinIQ - personal\'nyj uhod za kozhej', pageWidth / 2, 280, { align: 'center' });
  
  return doc.output('blob');
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram
export async function sendPlanToTelegram(planData: PlanData): Promise<{ success: boolean; error?: string }> {
  try {
    const chatId = getTelegramChatId();
    
    if (!chatId) {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      const textPlan = `SkinIQ ‚Äî –ü–ª–∞–Ω —É—Ö–æ–¥–∞
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${planData.userName}
–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
‚Ä¢ –¢–∏–ø –∫–æ–∂–∏: ${planData.skinType}
‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${planData.sensitivity ? '–¥–∞' : '–Ω–µ—Ç'}
‚Ä¢ –ñ–∏—Ä–Ω–æ—Å—Ç—å: ${planData.oiliness}
‚Ä¢ –¶–µ–ª—å: ${planData.primaryGoal}

–£–¢–†–ï–ù–ù–ò–ô –£–•–û–î:
${planData.morningSteps.map((step, i) => `${i + 1}. ${step.name}`).join('\n')}

–í–ï–ß–ï–†–ù–ò–ô –£–•–û–î:
${planData.eveningSteps.map((step, i) => `${i + 1}. ${step.name}`).join('\n')}`;

      await navigator.clipboard?.writeText(textPlan);
      return { success: true };
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    const pdfBlob = await generateBeautifulPDF(planData);
    
    // –°–æ–∑–¥–∞—ë–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('chat_id', chatId);
    formData.append('document', pdfBlob, `skiniq-plan-${planData.userName}-${Date.now()}.pdf`);
    formData.append('caption', `üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ –¥–ª—è ${planData.userName}\n\n–°–æ–∑–¥–∞–Ω –≤ SkinIQ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API
    const response = await fetch(`${BOT_API_URL}/sendDocument`, {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    
    if (result.ok) {
      return { success: true };
    } else {
      console.error('Telegram API error:', result);
      return { success: false, error: result.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' };
    }

  } catch (error) {
    console.error('Send to Telegram error:', error);
    return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram' };
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function getBotInfo() {
  try {
    const response = await fetch(`${BOT_API_URL}/getMe`);
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Bot info error:', error);
    return null;
  }
}