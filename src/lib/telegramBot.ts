import { jsPDF } from 'jspdf';

const BOT_TOKEN = "8138388674:AAHt8HqnPS3LRwo7l_g_q1Bw05c9vTqsfEw";
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

interface PlanData {
  userName: string;
  skinType: string;
  sensitivity: boolean;
  oiliness: string;
  primaryGoal: string;
  concerns: string[];
  morningSteps: Array<{ name: string; step: string }>;
  eveningSteps: Array<{ name: string; step: string }>;
  schedule?: Array<{ day: number; morningNotes: string[]; eveningNotes: string[] }>;
}

// –ü–æ–ª—É—á–∏—Ç—å chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
function getTelegramChatId(): string | null {
  if (typeof window !== 'undefined') {
    const tg = (window as any).Telegram?.WebApp;
    if (tg?.initDataUnsafe?.user?.id) {
      return tg.initDataUnsafe.user.id.toString();
    }
  }
  return null;
}


// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è PDF
function transliterate(text: string): string {
  const map: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e', '–∂': 'zh',
    '–∑': 'z', '–∏': 'i', '–π': 'j', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
    '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c',
    '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'E', '–ñ': 'Zh',
    '–ó': 'Z', '–ò': 'I', '–ô': 'J', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O',
    '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'C',
    '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch', '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  };
  
  return text.replace(/[–∞-—è—ë]/gi, (char) => map[char] || char);
}

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π PDF —Å –ø–æ–º–æ—â—å—é jsPDF
function generatePDFBlob(data: PlanData): Blob {
  const doc = new jsPDF();
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  doc.setFont('helvetica', 'normal');
  
  let yPos = 20;
  const lineHeight = 7;
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.text('SkinIQ - Personalnyj plan uhoda', pageWidth / 2, yPos, { align: 'center' });
  yPos += lineHeight * 2;
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Polzovatel: ${transliterate(data.userName)}`, 20, yPos);
  yPos += lineHeight;
  doc.text(`Data: ${new Date().toLocaleDateString('ru-RU')}`, 20, yPos);
  yPos += lineHeight * 2;
  
  // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–∂–∏
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Harakteristiki kozhi:', 20, yPos);
  yPos += lineHeight * 1.5;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(`Tip kozhi: ${transliterate(data.skinType)}`, 25, yPos);
  yPos += lineHeight;
  doc.text(`Chuvstvitelnost: ${data.sensitivity ? 'da' : 'net'}`, 25, yPos);
  yPos += lineHeight;
  doc.text(`Zhirnost: ${transliterate(data.oiliness)}`, 25, yPos);
  yPos += lineHeight;
  doc.text(`Cel: ${transliterate(data.primaryGoal)}`, 25, yPos);
  yPos += lineHeight * 1.5;
  
  if (data.concerns.length > 0) {
    doc.text(`Problemy: ${data.concerns.map(transliterate).join(', ')}`, 25, yPos);
    yPos += lineHeight * 2;
  }
  
  // –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Utrennij uhod:', 20, yPos);
  yPos += lineHeight * 1.5;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  data.morningSteps.forEach((step, index) => {
    doc.text(`${index + 1}. ${transliterate(step.name)}`, 25, yPos);
    yPos += lineHeight;
    if (yPos > 250) { // –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      doc.addPage();
      yPos = 20;
    }
  });
  yPos += lineHeight;
  
  // –í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Vechernij uhod:', 20, yPos);
  yPos += lineHeight * 1.5;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  data.eveningSteps.forEach((step, index) => {
    doc.text(`${index + 1}. ${transliterate(step.name)}`, 25, yPos);
    yPos += lineHeight;
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
  });
  
  // –§—É—Ç–µ—Ä
  doc.setFontSize(9);
  doc.setFont('helvetica', 'italic');
  doc.text('Sozdano v SkinIQ - personal\'nyj uhod za kozhej', pageWidth / 2, 280, { align: 'center' });
  
  return doc.output('blob');
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram
export async function sendPlanToTelegram(planData: PlanData): Promise<{ success: boolean; error?: string }> {
  try {
    const chatId = getTelegramChatId();
    
    if (!chatId) {
      // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      const textPlan = `SkinIQ ‚Äî –ü–ª–∞–Ω —É—Ö–æ–¥–∞
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${planData.userName}
–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:
‚Ä¢ –¢–∏–ø –∫–æ–∂–∏: ${planData.skinType}
‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${planData.sensitivity ? '–¥–∞' : '–Ω–µ—Ç'}
‚Ä¢ –ñ–∏—Ä–Ω–æ—Å—Ç—å: ${planData.oiliness}
‚Ä¢ –¶–µ–ª—å: ${planData.primaryGoal}

–£–¢–†–ï–ù–ù–ò–ô –£–•–û–î:
${planData.morningSteps.map((step, i) => `${i + 1}. ${step.name}`).join('\n')}

–í–ï–ß–ï–†–ù–ò–ô –£–•–û–î:
${planData.eveningSteps.map((step, i) => `${i + 1}. ${step.name}`).join('\n')}`;

      await navigator.clipboard?.writeText(textPlan);
      return { success: true };
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π PDF-–¥–æ–∫—É–º–µ–Ω—Ç
    const pdfBlob = generatePDFBlob(planData);
    
    // –°–æ–∑–¥–∞—ë–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('chat_id', chatId);
    formData.append('document', pdfBlob, `skiniq-plan-${planData.userName}-${Date.now()}.pdf`);
    formData.append('caption', `üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ –¥–ª—è ${planData.userName}\n\n–°–æ–∑–¥–∞–Ω –≤ SkinIQ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Bot API
    const response = await fetch(`${BOT_API_URL}/sendDocument`, {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    
    if (result.ok) {
      return { success: true };
    } else {
      console.error('Telegram API error:', result);
      return { success: false, error: result.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' };
    }

  } catch (error) {
    console.error('Send to Telegram error:', error);
    return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram' };
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export async function getBotInfo() {
  try {
    const response = await fetch(`${BOT_API_URL}/getMe`);
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Bot info error:', error);
    return null;
  }
}