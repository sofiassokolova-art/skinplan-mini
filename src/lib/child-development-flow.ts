/**
 * –ü–æ—Ç–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è BotHelp
 */

import { testBotHelpAPI, MOCK_DATA } from './bothelp-test';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Ç–æ–∫–∞
export interface ChildDevelopmentData {
  parentName: string;
  childAge: 'under_1' | 'over_1';
  exactAge: string;
  timestamp: string;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–∞
export enum FlowState {
  WELCOME = 'welcome',
  GET_NAME = 'get_name',
  GET_AGE_GROUP = 'get_age_group',
  GET_EXACT_AGE = 'get_exact_age',
  COMPLETED = 'completed'
}

// –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
export const AGE_GROUPS = {
  under_1: [
    { value: 'less_1_month', label: '–º–µ–Ω–µ–µ 1 –º–µ—Å—è—Ü–∞' },
    { value: '1_to_2_months', label: '–æ—Ç 1 –º–µ—Å—è—Ü–∞ –¥–æ 2—Ö' },
    { value: '2_to_3_months', label: '–æ—Ç 2—Ö –º–µ—Å—è—Ü–µ–≤ –¥–æ 3—Ö –º–µ—Å—è—Ü–µ–≤' },
    { value: '3_to_4_months', label: '–æ—Ç 3 –º–µ—Å—è—Ü–µ–≤ –¥–æ 4 –º–µ—Å—è—Ü–µ–≤' },
    { value: '4_to_5_months', label: '–æ—Ç 4 –¥–æ 5 –º–µ—Å—è—Ü–µ–≤' },
    { value: '5_to_6_months', label: '–æ—Ç 5 –¥–æ 6 –º–µ—Å—è—Ü–µ–≤' },
    { value: '6_to_7_months', label: '–æ—Ç 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ 7 –º–µ—Å—è—Ü–µ–≤' },
    { value: '7_to_8_months', label: '–æ—Ç 7 –º–µ—Å—è—Ü–µ–≤ –¥–æ 8 –º–µ—Å—è—Ü–µ–≤' },
    { value: '8_to_9_months', label: '–æ—Ç 8 –º–µ—Å—è—Ü–µ–≤ –¥–æ 9 –º–µ—Å—è—Ü–µ–≤' },
    { value: '9_to_10_months', label: '–æ—Ç 9 –º–µ—Å—è—Ü–µ–≤ –¥–æ 10 –º–µ—Å—è—Ü–µ–≤' },
    { value: '10_to_11_months', label: '–æ—Ç 10 –º–µ—Å—è—Ü–µ–≤ –¥–æ 11 –º–µ—Å—è—Ü–µ–≤' },
    { value: '11_to_12_months', label: '–æ—Ç 11 –º–µ—Å—è—Ü–µ–≤ –¥–æ 12 –º–µ—Å—è—Ü–µ–≤' }
  ],
  over_1: [
    { value: '1_to_1_5_years', label: '–æ—Ç 1 –≥–æ–¥–∞ –¥–æ 1,5 –ª–µ—Ç' },
    { value: '1_5_to_2_years', label: '–æ—Ç 1,5 –ª–µ—Ç –¥–æ 2—Ö –ª–µ—Ç' },
    { value: '2_to_3_years', label: '–æ—Ç 2—Ö –ª–µ—Ç –¥–æ 3 –ª–µ—Ç' },
    { value: '3_to_4_years', label: '–æ—Ç 3—Ö –ª–µ—Ç –¥–æ 4 –ª–µ—Ç' },
    { value: '4_to_5_years', label: '–æ—Ç 4—Ö –ª–µ—Ç –¥–æ 5 –ª–µ—Ç' },
    { value: '5_to_6_years', label: '–æ—Ç 5 –¥–æ 6 –ª–µ—Ç' }
  ]
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º
export class ChildDevelopmentFlow {
  private chatId: string;
  private userId: string;
  private currentState: FlowState = FlowState.WELCOME;
  private userData: Partial<ChildDevelopmentData> = {};

  constructor(chatId: string, userId: string) {
    this.chatId = chatId;
    this.userId = userId;
  }

  // –ù–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  async startFlow(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞');
    
    const welcomeMessage = `
üë∂ **–†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ä–µ–±–µ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ—Ä–º–∞–º?**

–ü—Ä–æ–π–¥–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞ –∑–∞ 10 –º–∏–Ω—É—Ç –∏ –ø–æ–ª—É—á–∏ –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è

üìã –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –í–û–ó —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –æ—Ç –≤–µ–¥—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –¥–µ—Ç—Å–∫–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é
    `;

    await testBotHelpAPI.sendMessage(this.chatId, welcomeMessage, {
      keyboard: {
        type: 'inline',
        buttons: [
          [{ text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'start_diagnosis' }]
        ]
      }
    });

    this.currentState = FlowState.GET_NAME;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleUserResponse(message: string, callbackData?: string): Promise<void> {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: "${message}" (callback: ${callbackData})`);
    console.log(`üìç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${this.currentState}`);

    switch (this.currentState) {
      case FlowState.GET_NAME:
        await this.handleNameInput(message);
        break;
        
      case FlowState.GET_AGE_GROUP:
        await this.handleAgeGroupSelection(callbackData || message);
        break;
        
      case FlowState.GET_EXACT_AGE:
        await this.handleExactAgeSelection(callbackData || message);
        break;
        
      default:
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
  private async handleNameInput(name: string): Promise<void> {
    if (!name.trim()) {
      await testBotHelpAPI.sendMessage(this.chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
      return;
    }

    this.userData.parentName = name.trim();
    console.log(`üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${this.userData.parentName}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await testBotHelpAPI.setUserVariables(this.userId, {
      parent_name: this.userData.parentName,
      flow_state: FlowState.GET_AGE_GROUP
    });

    const ageGroupMessage = `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${this.userData.parentName}! üëã

**–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç —É —Ä–µ–±–µ–Ω–∫–∞?**`;

    await testBotHelpAPI.sendMessage(this.chatId, ageGroupMessage, {
      keyboard: {
        type: 'inline',
        buttons: [
          [
            { text: 'üë∂ –¥–æ 1 –≥–æ–¥–∞', callback_data: 'age_under_1' },
            { text: 'üßí –±–æ–ª–µ–µ 1 –≥–æ–¥–∞', callback_data: 'age_over_1' }
          ]
        ]
      }
    });

    this.currentState = FlowState.GET_AGE_GROUP;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
  private async handleAgeGroupSelection(selection: string): Promise<void> {
    let ageGroup: 'under_1' | 'over_1';
    
    if (selection === 'age_under_1' || selection.includes('–¥–æ 1 –≥–æ–¥–∞')) {
      ageGroup = 'under_1';
    } else if (selection === 'age_over_1' || selection.includes('–±–æ–ª–µ–µ 1 –≥–æ–¥–∞')) {
      ageGroup = 'over_1';
    } else {
      await testBotHelpAPI.sendMessage(this.chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
      return;
    }

    this.userData.childAge = ageGroup;
    console.log(`üë∂ –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞: ${ageGroup}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    await testBotHelpAPI.setUserVariables(this.userId, {
      child_age_group: ageGroup,
      flow_state: FlowState.GET_EXACT_AGE
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await this.showExactAgeButtons(ageGroup);
    this.currentState = FlowState.GET_EXACT_AGE;
  }

  // –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
  private async showExactAgeButtons(ageGroup: 'under_1' | 'over_1'): Promise<void> {
    const ageOptions = AGE_GROUPS[ageGroup];
    const buttons = [];

    // –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for (let i = 0; i < ageOptions.length; i += 2) {
      const row = [];
      row.push({ text: ageOptions[i].label, callback_data: `age_${ageOptions[i].value}` });
      
      if (i + 1 < ageOptions.length) {
        row.push({ text: ageOptions[i + 1].label, callback_data: `age_${ageOptions[i + 1].value}` });
      }
      
      buttons.push(row);
    }

    const exactAgeMessage = `**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –º–∞–ª—ã—à–∞:**`;

    await testBotHelpAPI.sendMessage(this.chatId, exactAgeMessage, {
      keyboard: {
        type: 'inline',
        buttons
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
  private async handleExactAgeSelection(selection: string): Promise<void> {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏–∑ callback_data
    const ageValue = selection.replace('age_', '');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç
    const allAges = [...AGE_GROUPS.under_1, ...AGE_GROUPS.over_1];
    const selectedAge = allAges.find(age => age.value === ageValue);
    
    if (!selectedAge) {
      await testBotHelpAPI.sendMessage(this.chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
      return;
    }

    this.userData.exactAge = selectedAge.value;
    this.userData.timestamp = new Date().toISOString();
    
    console.log(`üéØ –¢–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤—ã–±—Ä–∞–Ω: ${selectedAge.label}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    await testBotHelpAPI.setUserVariables(this.userId, {
      exact_age: this.userData.exactAge,
      exact_age_label: selectedAge.label,
      flow_completed: true,
      flow_completed_at: this.userData.timestamp
    });

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫
    await this.completeFlow();
    this.currentState = FlowState.COMPLETED;
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
  private async completeFlow(): Promise<void> {
    const completionMessage = `
‚úÖ **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!**

üë§ **–†–æ–¥–∏—Ç–µ–ª—å:** ${this.userData.parentName}
üë∂ **–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:** ${this.userData.childAge === 'under_1' ? '–¥–æ 1 –≥–æ–¥–∞' : '–±–æ–ª–µ–µ 1 –≥–æ–¥–∞'}
üìÖ **–¢–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:** ${this.getAgeLabel(this.userData.exactAge!)}

üéØ –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –í–û–ó.

–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
    `;

    await testBotHelpAPI.sendMessage(this.chatId, completionMessage, {
      keyboard: {
        type: 'inline',
        buttons: [
          [
            { text: 'üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', callback_data: 'start_development_test' },
            { text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'view_data' }
          ]
        ]
      }
    });

    console.log('üéâ –ü–æ—Ç–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', this.userData);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
  private getAgeLabel(ageValue: string): string {
    const allAges = [...AGE_GROUPS.under_1, ...AGE_GROUPS.over_1];
    const age = allAges.find(a => a.value === ageValue);
    return age ? age.label : ageValue;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getCurrentState(): FlowState {
    return this.currentState;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  getUserData(): Partial<ChildDevelopmentData> {
    return { ...this.userData };
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
export async function testChildDevelopmentFlow(): Promise<void> {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞\n');
  
  const chatId = MOCK_DATA.testChatId;
  const userId = MOCK_DATA.testUserId;
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ—Ç–æ–∫–∞
  const flow = new ChildDevelopmentFlow(chatId, userId);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
  await flow.startFlow();
  
  console.log('\nüìù –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await flow.handleUserResponse('–ê–Ω–Ω–∞');
  await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
  
  await flow.handleUserResponse('', 'age_under_1');
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  await flow.handleUserResponse('', 'age_6_to_7_months');
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', flow.getUserData());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
export async function handleChildDevelopmentMessage(
  chatId: string, 
  userId: string, 
  message: string, 
  callbackData?: string
): Promise<void> {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userVars = await testBotHelpAPI.getUserVariables(userId);
  const currentState = userVars?.flow_state || FlowState.WELCOME;
  
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–∞
  if (callbackData === 'start_diagnosis' || currentState === FlowState.WELCOME) {
    const flow = new ChildDevelopmentFlow(chatId, userId);
    await flow.startFlow();
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –Ω–∞—á–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ
  if (currentState !== FlowState.WELCOME) {
    const flow = new ChildDevelopmentFlow(chatId, userId);
    await flow.handleUserResponse(message, callbackData);
  }
}

export default {
  ChildDevelopmentFlow,
  testChildDevelopmentFlow,
  handleChildDevelopmentMessage,
  FlowState,
  AGE_GROUPS
};


