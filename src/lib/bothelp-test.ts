/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è BotHelp API
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞!
 */

import { BotHelpAPI, BotHelpConfig } from './bothelp';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_CONFIG: BotHelpConfig = {
  botId: '300658:b15c4f51bffd31f6667e50f37a20a025',
  secret: '300658:c5d3ccb085f4a1fb6dd0984da2514a52',
  baseUrl: 'https://api.bothelp.io', // –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π URL –µ—Å–ª–∏ –µ—Å—Ç—å
};

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const MOCK_DATA = {
  testChatId: 'test_chat_12345',
  testUserId: 'test_user_67890',
  testMessages: [
    {
      id: 'msg_1',
      text: '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–∂—É',
      timestamp: Date.now() - 1000,
      userId: 'test_user_67890',
      chatId: 'test_chat_12345',
    },
    {
      id: 'msg_2', 
      text: '–£ –º–µ–Ω—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–∂–∞, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–Ω–µ',
      timestamp: Date.now() - 500,
      userId: 'test_user_67890',
      chatId: 'test_chat_12345',
    }
  ],
  testUser: {
    id: 'test_user_67890',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    phone: '+7 (999) 123-45-67',
    email: 'test@example.com',
    customFields: {
      skin_type: 'combination',
      age: 25,
      concerns: 'acne,oily_t_zone'
    }
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å API —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export class TestBotHelpAPI extends BotHelpAPI {
  private isTestMode: boolean = true;
  private testLogs: string[] = [];

  constructor(config: BotHelpConfig, testMode: boolean = true) {
    super(config);
    this.isTestMode = testMode;
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
  async sendMessage(chatId: string, text: string, options?: any): Promise<boolean> {
    if (this.isTestMode) {
      this.log(`üß™ –¢–ï–°–¢: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}`);
      this.log(`üìù –¢–µ–∫—Å—Ç: ${text}`);
      if (options) {
        this.log(`‚öôÔ∏è –û–ø—Ü–∏–∏: ${JSON.stringify(options, null, 2)}`);
      }
      this.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
      return true;
    }
    
    return super.sendMessage(chatId, text, options);
  }

  async getUserInfo(userId: string): Promise<any> {
    if (this.isTestMode) {
      this.log(`üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${userId}`);
      this.log('üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return MOCK_DATA.testUser;
    }
    
    return super.getUserInfo(userId);
  }

  async getChatHistory(chatId: string, limit: number = 50): Promise<any[]> {
    if (this.isTestMode) {
      this.log(`üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ${chatId}`);
      this.log(`üìú –í–æ–∑–≤—Ä–∞—â–∞–µ–º ${MOCK_DATA.testMessages.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
      return MOCK_DATA.testMessages;
    }
    
    return super.getChatHistory(chatId, limit);
  }

  async setUserVariables(userId: string, variables: Record<string, any>): Promise<boolean> {
    if (this.isTestMode) {
      this.log(`üß™ –¢–ï–°–¢: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      this.log(`üìù –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${JSON.stringify(variables, null, 2)}`);
      this.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ "—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã" (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
      return true;
    }
    
    return super.setUserVariables(userId, variables);
  }

  async getUserVariables(userId: string): Promise<Record<string, any> | null> {
    if (this.isTestMode) {
      this.log(`üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      this.log('üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
      return MOCK_DATA.testUser.customFields;
    }
    
    return super.getUserVariables(userId);
  }

  async testConnection(): Promise<boolean> {
    if (this.isTestMode) {
      this.log('üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API');
      this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ "—É—Å–ø–µ—à–Ω–æ" (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
      return true;
    }
    
    return super.testConnection();
  }

  async getBotInfo(): Promise<any> {
    if (this.isTestMode) {
      this.log('üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ');
      const mockBotInfo = {
        id: TEST_CONFIG.botId,
        name: 'SkinPlan Test Bot',
        status: 'active',
        created_at: '2024-01-01T00:00:00Z',
        test_mode: true
      };
      this.log('üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞');
      return mockBotInfo;
    }
    
    return super.getBotInfo();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private log(message: string): void {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    this.testLogs.push(logMessage);
    console.log(logMessage);
  }

  getTestLogs(): string[] {
    return [...this.testLogs];
  }

  clearTestLogs(): void {
    this.testLogs = [];
  }

  setTestMode(enabled: boolean): void {
    this.isTestMode = enabled;
    this.log(`üîÑ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
  }
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
export const testBotHelpAPI = new TestBotHelpAPI(TEST_CONFIG, true);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function runBotTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ BotHelp API...\n');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  console.log('=== –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===');
  const connectionTest = await testBotHelpAPI.testConnection();
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${connectionTest ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}\n`);
  
  // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  console.log('=== –¢–ï–°–¢ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ===');
  const botInfo = await testBotHelpAPI.getBotInfo();
  console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${botInfo ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}\n`);
  
  // –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  console.log('=== –¢–ï–°–¢ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
  const messageTest = await testBotHelpAPI.sendMessage(
    MOCK_DATA.testChatId,
    '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç SkinPlan –±–æ—Ç–∞.',
    {
      keyboard: {
        type: 'inline',
        buttons: [
          [{ text: '–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∞', callback_data: 'test_button' }]
        ]
      }
    }
  );
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${messageTest ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}\n`);
  
  // –¢–µ—Å—Ç 4: –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  console.log('=== –¢–ï–°–¢ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ===');
  const userInfo = await testBotHelpAPI.getUserInfo(MOCK_DATA.testUserId);
  console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', userInfo);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${userInfo ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}\n`);
  
  // –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('=== –¢–ï–°–¢ 5: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===');
  const setVars = await testBotHelpAPI.setUserVariables(MOCK_DATA.testUserId, {
    test_variable: 'test_value',
    skin_analysis_completed: true,
    last_test_date: new Date().toISOString()
  });
  console.log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${setVars ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
  
  const getVars = await testBotHelpAPI.getUserVariables(MOCK_DATA.testUserId);
  console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', getVars);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${getVars ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}\n`);
  
  // –¢–µ—Å—Ç 6: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
  console.log('=== –¢–ï–°–¢ 6: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ===');
  const chatHistory = await testBotHelpAPI.getChatHistory(MOCK_DATA.testChatId);
  console.log('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:', chatHistory);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${chatHistory.length > 0 ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞'}\n`);
  
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  testBotHelpAPI.getTestLogs().forEach(log => console.log(log));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SkinPlan
export async function testSkinPlanIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SkinPlan —Å BotHelp...\n');
  
  // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏
  const mockSkinAnalysis = {
    skinType: 'combination',
    hydration: 75,
    pigmentation: 'light',
    wrinkles: 'minimal',
    pores: 'visible',
    concerns: ['acne', 'oily_t_zone'],
    recommendations: [
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ',
      '–î–æ–±–∞–≤—å—Ç–µ —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º',
      '–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ SPF –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
    ]
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
  console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞...');
  await testBotHelpAPI.setUserVariables(MOCK_DATA.testUserId, {
    skin_analysis: JSON.stringify(mockSkinAnalysis),
    analysis_date: new Date().toISOString(),
    analysis_completed: true
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
  const resultsMessage = `
üî¨ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏ (–¢–ï–°–¢):**

**–¢–∏–ø –∫–æ–∂–∏:** ${mockSkinAnalysis.skinType}
**–£—Ä–æ–≤–µ–Ω—å —É–≤–ª–∞–∂–Ω–µ–Ω–Ω–æ—Å—Ç–∏:** ${mockSkinAnalysis.hydration}%
**–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è:** ${mockSkinAnalysis.pigmentation}
**–ú–æ—Ä—â–∏–Ω—ã:** ${mockSkinAnalysis.wrinkles}
**–ü–æ—Ä—ã:** ${mockSkinAnalysis.pores}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
${mockSkinAnalysis.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

*–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏*
  `;
  
  await testBotHelpAPI.sendMessage(MOCK_DATA.testChatId, resultsMessage, {
    keyboard: {
      type: 'inline',
      buttons: [
        [
          { text: 'üìã –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —É—Ö–æ–¥–∞', callback_data: 'get_plan' },
          { text: 'üõí –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'products' }
        ],
        [
          { text: 'üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', callback_data: 'new_analysis' }
        ]
      ]
    }
  });
  
  console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default {
  testBotHelpAPI,
  runBotTests,
  testSkinPlanIntegration,
  MOCK_DATA
};


