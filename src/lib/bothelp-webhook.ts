/**
 * Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è BotHelp
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
 */

import { handleChildDevelopmentMessage } from './child-development-flow';
import { testBotHelpAPI } from './bothelp-test';

// –¢–∏–ø—ã –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export interface BotHelpWebhookMessage {
  message_id: string;
  chat_id: string;
  user_id: string;
  text?: string;
  callback_data?: string;
  timestamp: number;
  message_type: 'text' | 'callback' | 'command';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö webhook'–æ–≤
export class BotHelpWebhookHandler {
  private isTestMode: boolean = true;

  constructor(testMode: boolean = true) {
    this.isTestMode = testMode;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–∞
  async handleWebhook(payload: any): Promise<{ status: string; message: string }> {
    try {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç BotHelp:', JSON.stringify(payload, null, 2));

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const message = this.extractMessageData(payload);
      
      if (!message) {
        return { status: 'error', message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' };
      }

      console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${message.user_id}: ${message.text || message.callback_data}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.processMessage(message);

      return { status: 'success', message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ' };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
      return { status: 'error', message: `–û—à–∏–±–∫–∞: ${error.message}` };
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ payload
  private extractMessageData(payload: any): BotHelpWebhookMessage | null {
    try {
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É BotHelp API
      const message: BotHelpWebhookMessage = {
        message_id: payload.message_id || payload.id || Date.now().toString(),
        chat_id: payload.chat_id || payload.chat?.id || 'unknown',
        user_id: payload.user_id || payload.user?.id || payload.from?.id || 'unknown',
        text: payload.text || payload.message?.text,
        callback_data: payload.callback_data || payload.data,
        timestamp: payload.timestamp || payload.date || Date.now(),
        message_type: payload.callback_data ? 'callback' : 'text'
      };

      return message;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async processMessage(message: BotHelpWebhookMessage): Promise<void> {
    const { chat_id, user_id, text, callback_data, message_type } = message;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (this.isTestMode) {
      console.log(`üß™ –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${message_type} —Å–æ–æ–±—â–µ–Ω–∏—è`);
      console.log(`   –ß–∞—Ç: ${chat_id}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user_id}`);
      console.log(`   –¢–µ–∫—Å—Ç: ${text || 'N/A'}`);
      console.log(`   Callback: ${callback_data || 'N/A'}`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && text.startsWith('/')) {
      await this.handleCommand(chat_id, user_id, text);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞
    await handleChildDevelopmentMessage(chat_id, user_id, text || '', callback_data);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  private async handleCommand(chatId: string, userId: string, command: string): Promise<void> {
    console.log(`ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${command}`);

    switch (command.toLowerCase()) {
      case '/start':
        await this.handleStartCommand(chatId, userId);
        break;
        
      case '/help':
        await this.handleHelpCommand(chatId);
        break;
        
      case '/reset':
        await this.handleResetCommand(chatId, userId);
        break;
        
      case '/status':
        await this.handleStatusCommand(chatId, userId);
        break;
        
      default:
        await testBotHelpAPI.sendMessage(chatId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.`);
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  private async handleStartCommand(chatId: string, userId: string): Promise<void> {
    const welcomeMessage = `
üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ—Ä–º–∞–º –í–û–ó.

üöÄ –ù–∞—á–Ω–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?
    `;

    await testBotHelpAPI.sendMessage(chatId, welcomeMessage, {
      keyboard: {
        type: 'inline',
        buttons: [
          [{ text: 'üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', callback_data: 'start_diagnosis' }]
        ]
      }
    });
  }

  // –ö–æ–º–∞–Ω–¥–∞ /help
  private async handleHelpCommand(chatId: string): Promise<void> {
    const helpMessage = `
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±–µ–Ω–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/reset - –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

üìã **–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:**
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –í–û–ó
‚Ä¢ –ó–∞–Ω–∏–º–∞–µ—Ç 10 –º–∏–Ω—É—Ç
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è
    `;

    await testBotHelpAPI.sendMessage(chatId, helpMessage);
  }

  // –ö–æ–º–∞–Ω–¥–∞ /reset
  private async handleResetCommand(chatId: string, userId: string): Promise<void> {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await testBotHelpAPI.setUserVariables(userId, {
      parent_name: null,
      child_age_group: null,
      exact_age: null,
      flow_state: 'welcome',
      flow_completed: false
    });

    await testBotHelpAPI.sendMessage(chatId, 'üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–Ω–æ–≤–æ
    await this.handleStartCommand(chatId, userId);
  }

  // –ö–æ–º–∞–Ω–¥–∞ /status
  private async handleStatusCommand(chatId: string, userId: string): Promise<void> {
    const userVars = await testBotHelpAPI.getUserVariables(userId);
    
    if (!userVars || !userVars.parent_name) {
      await testBotHelpAPI.sendMessage(chatId, 'üìä –°—Ç–∞—Ç—É—Å: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
      return;
    }

    const statusMessage = `
üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**

üë§ **–†–æ–¥–∏—Ç–µ–ª—å:** ${userVars.parent_name}
üë∂ **–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:** ${userVars.child_age_group || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}
üìÖ **–¢–æ—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:** ${userVars.exact_age_label || '–Ω–µ –≤—ã–±—Ä–∞–Ω'}
üîÑ **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** ${userVars.flow_state || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** ${userVars.flow_completed ? '–î–∞' : '–ù–µ—Ç'}

${userVars.flow_completed ? 'üéØ –ì–æ—Ç–æ–≤—ã –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ!' : '‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É...'}
    `;

    await testBotHelpAPI.sendMessage(chatId, statusMessage);
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook'–∞
  async testWebhook(): Promise<void> {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...\n');

    // –¢–µ—Å—Ç 1: –ö–æ–º–∞–Ω–¥–∞ /start
    console.log('=== –¢–ï–°–¢ 1: –ö–æ–º–∞–Ω–¥–∞ /start ===');
    await this.handleWebhook({
      message_id: 'test_1',
      chat_id: 'test_chat',
      user_id: 'test_user',
      text: '/start',
      timestamp: Date.now()
    });

    // –¢–µ—Å—Ç 2: –í–≤–æ–¥ –∏–º–µ–Ω–∏
    console.log('\n=== –¢–ï–°–¢ 2: –í–≤–æ–¥ –∏–º–µ–Ω–∏ ===');
    await this.handleWebhook({
      message_id: 'test_2',
      chat_id: 'test_chat',
      user_id: 'test_user',
      text: '–ê–Ω–Ω–∞',
      timestamp: Date.now()
    });

    // –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    console.log('\n=== –¢–ï–°–¢ 3: –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ===');
    await this.handleWebhook({
      message_id: 'test_3',
      chat_id: 'test_chat',
      user_id: 'test_user',
      callback_data: 'age_under_1',
      timestamp: Date.now()
    });

    // –¢–µ—Å—Ç 4: –í—ã–±–æ—Ä —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
    console.log('\n=== –¢–ï–°–¢ 4: –í—ã–±–æ—Ä —Ç–æ—á–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ ===');
    await this.handleWebhook({
      message_id: 'test_4',
      chat_id: 'test_chat',
      user_id: 'test_user',
      callback_data: 'age_6_to_7_months',
      timestamp: Date.now()
    });

    // –¢–µ—Å—Ç 5: –ö–æ–º–∞–Ω–¥–∞ /status
    console.log('\n=== –¢–ï–°–¢ 5: –ö–æ–º–∞–Ω–¥–∞ /status ===');
    await this.handleWebhook({
      message_id: 'test_5',
      chat_id: 'test_chat',
      user_id: 'test_user',
      text: '/status',
      timestamp: Date.now()
    });

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
export const webhookHandler = new BotHelpWebhookHandler(true);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default {
  BotHelpWebhookHandler,
  webhookHandler,
  BotHelpWebhookMessage
};


