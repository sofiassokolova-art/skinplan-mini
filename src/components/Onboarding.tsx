import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

interface OnboardingStep {
  id: string;
  title: string;
  description: string;
  icon: string;
  action?: {
    label: string;
    path: string;
  };
}

const ONBOARDING_STEPS: OnboardingStep[] = [
  {
    id: 'welcome',
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SkinPlan! üëã',
    description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π. –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.',
    icon: '‚ú®'
  },
  {
    id: 'quiz',
    title: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –∫–æ–∂–µ üìù',
    description: '–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É –æ —Ç–∏–ø–µ –∫–æ–∂–∏, –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 3-5 –º–∏–Ω—É—Ç.',
    icon: 'üìã',
    action: {
      label: '–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É',
      path: '/quiz'
    }
  },
  {
    id: 'photo',
    title: 'AI-–∞–Ω–∞–ª–∏–∑ –∫–æ–∂–∏ üì∏',
    description: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—à –ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏—Ç 12 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–µ–ª–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã.',
    icon: 'üî¨'
  },
  {
    id: 'plan',
    title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ üìã',
    description: '–ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ 28 –¥–Ω–µ–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.',
    icon: 'üéØ'
  },
  {
    id: 'pdf',
    title: '–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç üìÑ',
    description: '–°–∫–∞—á–∞–π—Ç–µ –ø–ª–∞–Ω –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.',
    icon: 'üíæ'
  }
];

interface OnboardingProps {
  onComplete: () => void;
  onSkip: () => void;
  onStartTour?: () => void;
}

export default function Onboarding({ onComplete, onSkip, onStartTour }: OnboardingProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [isVisible, setIsVisible] = useState(true);
  const navigate = useNavigate();

  const step = ONBOARDING_STEPS[currentStep];
  const isLastStep = currentStep === ONBOARDING_STEPS.length - 1;

  const nextStep = () => {
    if (isLastStep) {
      handleComplete();
    } else {
      setCurrentStep(prev => prev + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleComplete = () => {
    setIsVisible(false);
    setTimeout(() => {
      onComplete();
    }, 300);
  };

  const handleSkip = () => {
    setIsVisible(false);
    setTimeout(() => {
      onSkip();
    }, 300);
  };

  const handleAction = () => {
    if (step.action) {
      handleComplete();
      navigate(step.action.path);
    }
  };

  if (!isVisible) {
    return null;
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className={`bg-white rounded-3xl max-w-md w-full mx-auto shadow-2xl transform transition-all duration-300 ${
        isVisible ? 'scale-100 opacity-100' : 'scale-95 opacity-0'
      }`}>
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <div className="px-6 pt-6">
          <div className="flex justify-between items-center mb-4">
            <span className="text-sm text-gray-500">
              {currentStep + 1} –∏–∑ {ONBOARDING_STEPS.length}
            </span>
            <button 
              onClick={handleSkip}
              className="text-sm text-gray-500 hover:text-gray-700 transition"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            </button>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2 mb-6">
            <div 
              className="bg-gradient-to-r from-indigo-500 to-purple-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentStep + 1) / ONBOARDING_STEPS.length) * 100}%` }}
            />
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="px-6 pb-6">
          {/* –ò–∫–æ–Ω–∫–∞ */}
          <div className="text-center mb-6">
            <div className="text-6xl mb-4">{step.icon}</div>
            <h2 className="text-2xl font-bold mb-3 text-gray-900">
              {step.title}
            </h2>
            <p className="text-gray-600 leading-relaxed">
              {step.description}
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="space-y-3">
            <div className="flex gap-3">
              {currentStep > 0 && (
                <button
                  onClick={prevStep}
                  className="flex-1 px-4 py-3 rounded-full border border-gray-300 text-gray-700 hover:bg-gray-50 transition"
                >
                  –ù–∞–∑–∞–¥
                </button>
              )}
              
              {step.action ? (
                <button
                  onClick={handleAction}
                  className="flex-1 px-4 py-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:opacity-90 transition"
                >
                  {step.action.label}
                </button>
              ) : (
                <button
                  onClick={nextStep}
                  className="flex-1 px-4 py-3 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white hover:opacity-90 transition"
                >
                  {isLastStep ? '–ù–∞—á–∞—Ç—å' : '–î–∞–ª–µ–µ'}
                </button>
              )}
            </div>
            
            {/* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            {isLastStep && onStartTour && (
              <button
                onClick={() => {
                  handleComplete();
                  onStartTour();
                }}
                className="w-full px-4 py-2 rounded-full border border-indigo-300 text-indigo-600 hover:bg-indigo-50 transition text-sm"
              >
                üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
              </button>
            )}
          </div>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
          <div className="flex justify-center gap-2 mt-6">
            {ONBOARDING_STEPS.map((_, idx) => (
              <button
                key={idx}
                onClick={() => setCurrentStep(idx)}
                className={`w-2 h-2 rounded-full transition-all ${
                  idx === currentStep 
                    ? 'bg-indigo-500 w-6' 
                    : idx < currentStep 
                      ? 'bg-indigo-300' 
                      : 'bg-gray-300'
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º
export const useOnboarding = () => {
  const [showOnboarding, setShowOnboarding] = useState(false);

  useEffect(() => {
    const hasSeenOnboarding = localStorage.getItem('skinplan_onboarding_completed');
    if (!hasSeenOnboarding) {
      setShowOnboarding(true);
    }
  }, []);

  const completeOnboarding = () => {
    localStorage.setItem('skinplan_onboarding_completed', 'true');
    setShowOnboarding(false);
  };

  const skipOnboarding = () => {
    localStorage.setItem('skinplan_onboarding_completed', 'true');
    setShowOnboarding(false);
  };

  const resetOnboarding = () => {
    localStorage.removeItem('skinplan_onboarding_completed');
    setShowOnboarding(true);
  };

  return {
    showOnboarding,
    completeOnboarding,
    skipOnboarding,
    resetOnboarding
  };
};